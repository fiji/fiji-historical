gitte asked me to create a file which I will commit in a moment and now some change after that .I am revising the git commit,add and status commands

May6 09 : I have created a sample java frame with fiji icon(microscope one)  and using Rsyntaxtextarea jar file

May7 09	: added the opening and saving files feature and learnt about the "diff" command , advantage of "git log -p" over "git log" and the creating jar files simply by adding the CLASSPATH in the Fakefile

May9 09	:  improved the file opening and closing i.e. managing replacements and when to save and when to save as added simple features like cut copy paste undo and redo first by my own code but then realized that the RTextEditorKit.java(in package RTextArea of submodule RSyntaxTextArea) has straight forward functions for these functions I spent five hours on learning clipboard and Transferable etc but Rsyntaxtextarea is awesome got to go home otherwise I would have played a lot today with other functions in RTextEditorKit

May11 09: Gitte told me how to make an application a plugin and I went through the autocomplete package especially the CompletionProvider interface and also sorted out a problem regarding creating a jar file as I was stupid enough not to rebuild the Fiji jar file in the misc folder which I was supposed to do as gitte changed some settings for --jar a couple of days ago.

May13 09: Sorted out how to generate the class names for the autocompletion by splitting the classpath.
	For the completion part for every path create recursive list at every step with each List having a key which It will fill and the key will be the path till that point like for "j" it will match the first part ie the parent and then and on writing "java.a" it should match with the second step on the List java.awt  

May17 09 Created the class names generator but the structure is not perfect.Also learnt how to learn to remove white spaces and the Fiji Classnames convention etc.

May19 09 Created the FindDialog.java and the ReplaceDialog.java and added it to the texteditor GUI and removed flaws regarding the Quit and some minor functions on opening and closing

May21 09 Changed the design of the autocompleteClassGenerator.java and went through the details of the DefaultCompletionProvider,AbstractCompletionProvider.java and other classes in the autocomplete package.

May23 09 talked to gitte about the design of the autocompleteClassGenerator.java and hence changed the design to a heap(tree with any number of children) and and used TreeSet class as a list of the names which will childList of a given node the design worked fine individually but still giving a lot of errors when added it to the fiji.scripting package the file is now known as Classnames.java and 

May24 09 Created file named the DefaultProvider.java on the lines of the DefaultCompletionProvider.java and also a file named ClassCompletionProvider.java

May25 09 The autocomplete window is working fine but some problems are there like I explicitly created a new CompletionProvider everytime I pressed a new key as the all possible list of completions are variable and depend on the text in the text area so I did not allow the editor to divide the tokens with "." and hence like if I write "java.awt.ev" It treats the whole as a token but I manually splitted the token on the basis of "." to decide which completions should be there in the completion Provider but the autocomplete package has a inbuilt feature which automatically prints the completion if there is only one completion and not create the window but since I played with their token definition so It perhaps does not consider event as a completion of "java.awt.ev" and hence does not print neither does it show window as the no of completions is one .So in fact for the editor there is no completion for a single completion case and more over in some cases it is showing no completion i.e. java.util.NoSuchElementException I think it is some logical flaw .looking into it cant ssh after 12 midnight to outside servers .

May26 09 Created a new function getEnteredText which uses the definition for ValidChar as any letter or digit including '_' or '.' so that it does not interfere with the the getAlreadyEnteredText function which uses the definition for ValidChar as any letter or digit including '_' only.So I am now able to provide completion after ".".Created Script_Editor.config and changed the MAINCLASS to Script_Editor and did necessary changes to include the run function required to make the text editor a plugin.

May27 09 created a menu item for Autocomplete by trying to fake a keypress(which is done by class Java.awt.Robot but that was strongly not suggested by Mark so first tried to inherit the AutoCompletion class to another class ForAutocompleteMenu and then access the protected function refreshPopupWindow but I needed the attributes of the object of Autocompletion which I could not provide as the function was protected but then found about the doCompletion() method which was designed to make hosting applications invoke autocomplete programmatically. Did changes like not calling for the autocomplete when there is no text in the textArea earlier it was doing so and hence producing all list of completions. Moreover got to know more about the proper usage of super() function in the constructor of the sub-class

May28 09 I got mail from Johannes regarding the doCompletion function() but the important thing was the way he searched for it I took an hour or so for me to find the method doCompletion. Anyways I forgot to mention that yesterday I changed the style of Dialog boxes as there is a problem in JFileChooser in navigating through the directories.I used ij.io.OpenDialog and ij.io.SaveDialog.Anyways transferred the logic of splitting and creating thelist of Completions from ClassCompletionProvider to ClassNames.java. Removed the description window and now there will hopefully be no uncaught exception while autocompleting. I am also facing a problem that the Filedialog box opened on doing OpenDialog dialog= new OpenDialog(); is not disposing on its own. The FileDialog box is not a class member so I am not able to do setDefaultOperationOnClose(EXIT_ON_CLOSE) or force it to dispose. 

May29 09 : Discussed with gitte the final design for the class generation learnt a bit about the generics, TreeMap but finally decided to go for the design with a class Package extending TreeSet<Item> where Item is an Interface having a getName() function which returns the key.The Package has a package part name as its key and the there is a ClassName class which is basically a class having a String key and implementing the Item interface . The new class which generates the classnames will be temporarily known as ClassNames1 . So I decided to add four new files to the package three classes and one interface. Created the two classes Package,ClassName and the package Item .

May30 09 : Created the ClassNames1.java which dramatically simplified the size and the complexity of the code but I am not sure that it is as efficint as before while creating the tree but that has to do once so not a major issue. After a few errors managed to get it working but some errors are still left.

May31 09 : Removed the errors etc. Yes leafw and gitte were right when I ran the Editor as plugin and not as standalone the OpenDialog and SaveDialog worked fine .Phew, the classnames generation and autocompletion of classnames is finally over now looking for the method names got a mail from Albert suggesting some changes.Was out of Campus from Saturday night to Sunday afternoon so not much work today so far I intend to make changes which Albert has suggested.Looking forward to another exciting week.

June1 09 : Some of the time was used up in the setting of pin and other banking procedures of the GSoc card. But implemented the changes suggested by Albert in his mail .

June2 09 : Added the constructors as well in the completion's list.I used the custom ClassLoader using the getClass().getClassLoader() function to load the classes as suggested by gitte. Also I earlier forgot to include the include the classnames in the list of completions when there is no dot in the list of completions which I checked but there is  a concern it is getting a bit slow as now for each classname I have to go down the tree recursively but to keep it simple this is the sacrifice right now am I right gitte ? I faced a problem of NoClassDefFoundError which was arising when looking for classNames as there were some classes which use to be there(I mean classpath) during the compilation but they could not be found during running.Right now I am just catching it and ignoring them cant do much about it right now.

June3 09 : Did changes again in the ClassNames1.java to distinguish Package and ClassName and also improved the completion list when there is a dot in the end of the entered text and first changed the design of addToTree from recursion to for-loop then realized that objects are passed to reference so again changed back to recursion.

June4 09 : Had a chat with gitte first about the recursion thing and then I realized that the objects in the function are not actually the objects but they are the references so finally worked out the loop structure and it had one more obvious advantage that I did not have to split it every time or in fact I did not have to split even once. Also discussed about the functions completion and first decided to move on with the static methods as I will not have to worry about the declared objects for the static methods and variables.

June5 09 : Worked on the methods completion. Initially I thought about creating Package with the classname as the key and the methods and variables in it but after discussing with gitte realized that the it will not be a good thing to make a Package of a classname and moreover in this way I make methods and variables as the Classes. So I decided that ClassName class will have methodnames as it member variable. Now the key was when to initialize the methodNames(the member variable of ClassName) to the method names of that particular. First I decided to do it simultaneously with the ClassName object creation in addToTree but to load so many classes in the starting and along with it a few NoClassDefFoundError made the starting process very slow so slow that it started giving java.lang.OutOfMemoryError. So I changed the design a bit and now I am loading the classing and initializing the value of methodNames to the methods by Class.getMethods only when the class is required as a completion in this way distributing the loading of class which is reasonably fast. I hope gitte is now ok with me using CompletionProvider in ClassNames.java. Right now I am not showing all methods(given by Class.getMethods()) irrespective of it is static or not static which is wrong and I intend to correct it in a while.

June 6,7 09 : Improved the design of the method completions as earlier there were no method completions when the text starts with classname so introduced a new method for that and also to show completions also after the dot so introduced generateClassCompletion function etc . The class loading was to be done a number of times so created a function loadClassNames for that.

June 8 09 : Made a few commits today for the improvements of method completions which include creating the classStartFunction which makes sure the functions are completed in case the the class name is not prefixed by the package name which was a bug earlier. Later had a discussion with gitte regarding the completions of non-static methods and then I realized that I need to look for a way to get the tokens or rather tokenlist and look for the import statements to find out the classes which were imported and perform the completion of their functions and also RSyntaxTextArea does not support Clojure so I will have to  do something to provide syntax-highlighting for that as well.

June 9 09 : Did a rigorous study of RSyntaxTextArea code and found out the I need to create a new scanner or a TokenMaker for Clojure like those for Java and other languages . Also found putMapping function for setting the TokenMaker but later on chatting with gitte realized that the class is not public so could not access the function . Then I came up with the setSyntaxStyle(TokenMaker tokenMaker) function in the RSyntaxDocument class which is specifically designed to incorporate user-defined TokenMaker for non-supported languages. RSyntaxDocument also seems to solve the puzzle of finding the tokenList as there is a function in the RSyntaxDocument which gives the tokenList of the tokens in a given line and by looking in the starting lines of the code I should guess the classes imported and look for its objects in the text and then provide completions.

June 10 09 : Created two new classes ObjStartCompletions and ImportedClassObjects. ObjStartCompletions has a function setObjects which provides completions for objects of imported classes i.e. the non-static functions and ImportedClassObjects forms a structure of a objects with its member variables as the name of the object , its class and its class's fullName and its implements Comparable . Have to improve compareTo function as it currently decides on the basis of object name which is wrong as two classes can declare object of same name yet they are different objects and should be treated in different way in the regard of providing completions. Spent the whole day writing code and debugging.

June 11 09 : Did a few changes to the ObjStartCompletions and ImportedClassObjects for improved completion list. I contacted the author of RSyntaxTextArea regaring how to create the parser of Clojure and how it is different to normal JFlex parsing. I went through the parsers of other languages and read the grammer of Clojure.

June 12 09 : Read the grammer completely formulated the regular expressions and also learnt how to create a parser using JFlex, I mean how to create a JFlex code. Then later in the evening I started writing the code for ClojureTokenMaker and almost wrote the code with the help of the details sent to me by Robert, the author of RSyntaxTextArea.

June 13 09 : Did some changes and then created the java code of the parser ClojureTokenMaker.java which parses the code of Clojure. Later did some changes as Multiline strings was not working and did some other changes

JUne 15 09 : Discussed with gitte the need to include Matlab as one of the languages which Script Editor must support . Read the grammer of .m files.

June 16 09 : Could not do much work as I was not well had viral fever overnight.

June 17 09 : Got some relief from fever so continued the work of producing the work of creating Matlab parser and managed to complete by the evening. Adding the multiline comment took some time. Did some changes in FindDialog and ReplaceDialog to continue finding text even when the file end has been reached.

June 19 09 : Created a new class LanguageScriptMap which maps from language extension(String) to the objects of RefreshScripts. But I was not able to import the packages for individual languages. So I talked to gitte and he asked me to add them to the classpath and then it worked fine but I am still facing a problem Refresh_Javas class used to run java is not contained in a package so I am not able to import Refresh_Javas class and hence by now the script editor doesnot run java scripts. One more important thing is that I changed the definition of runScript(String path) function in RefreshScripts class from protected to public and hence as gitte said it must be changed officially.

June 22 09 : Discussed with gitte about the progress and he reminded me to make use of the arguement to open a file of the pathname so I changed the openAction such that it can open a file with a pathname irrespective of it being called from inside or outside of the TextEditor class.He also suggested me to do some refactoring so that the repetetion of the code does not happen. I also worked on it. I had a issue with RefreshJavas not able to run the java scripts and it had something to do with the Refresh_Javas.

June 23 09 : Repackaged the Refresh_Javas class as the Package name does not follow the case conventions . DId some further refactoring in the TextEditor.java file.DIscussed with gitte about the implicit vs explicit import statements. So I initially explicitly used the class by doing something like "Clojure.Refersh_Clojure" but that was also not correct so I kept the import statements but this time the import of the classes was explicit like "import Clojure.Refresh_Clojure_Scripts;" and then use the class name. 

June 24 09 : Discussed with gitte about the need to remove the invokeLater() from the run function . This was the reason why I was getting a null value from Macro.getOptions() functions which in turn was creating a null pointer exception in Macro.getValue() function. This was happening because the thread which called the run function was changed due to invokeLater(). 

June 25 09 : Did some more of refactoring in TextEditor and other classes . By now the script editor can run scripts. Provided the import statements based completions for JRuby and Javascript.

June 26 09 : Did some changes suggested by gitte in his latest mail with subject texteditor refactoring, The changes include removing error-prone use of title for checking if file is unnamed etc. Discussed with gitte the need to do completions of only those classes which are imported. So I created two classes first which parses the document for import statements only till a package or a import statement or a comment is found. The other class parses the text for the constructor call hence called the Constructor parser.

June 27 09 : Now I used both the above made classes to complete the classnames and its static members of only those which are imported. Next I have also used them to provide completions of the non-static members which are called by the objects which is taken care by the constructor parser which keeps track of the constructor call.

June 29 09 : I added two more languages support in the import parser and did some debugging to get the import statements working completely .

June 30 09 : So far the constructor parser was just parsing the constructor calls as it is done in java and javascript. So I changed the code and added the support for all the languages.Moreover it was not looking complete as there was no completion for a thing like "list=new java.awt.List();" . It was a bit easier as there is no need to involve import statements parsing so I extended the class and added a new function to take care of this.Also I did some refactoring like removing some additional or commented out code.

July 1 09 : Did some changes to the constructor parser and import parser and then removed some errors in their code. I decided to look for the debugging help on the internet and found jswat as one of the open source debugger. I sent a mail as well to the mentors regarding their help to find out some relevant material to study on debugging.

July 2 09 : gitte asked me not to go through the jswat code as it is built highly to support netbeans and suggested me to go through the JPDA API in java which supports the debugging applications and the jdb debugger which is an inbuilt command line debugger in JDK.

July 3 09 : I went through the JPDA and kept revolving around to find the thread where to start or what is the key, finally I found out that the key is in the Bootstrap class which creates an instance of a VirtualMachineManager which supports the connection between the JVM and the debugger. But there were four different ways to achieve such a connection. I found myself unable to decide further the most appropriate option so I sent a mail to the mentors in this regard.

July 6 09 : gitte told me that how to connect a debugger to JVM is a decision which involves a very deep insight of the things. I tried to look into it but could not find something very concrete so I decided to go through the application part hoping that may be the application part holds the key for the decision .

July 7 09 : I created two separate classes standalone one with JVM attaching to the debugger and other debugger launching the JVM. The debugger launching JVM worked for me and I also learnt how to set the values corresponding to the various keys in the map which is used as a argument while launching the JVM using LaunchingConnector.launch(java.util.Map). I tested and printed the value of a variable foo in the test class "Test" every time it was changed. But I still could not come to a conclusion that which method to pursue.

July 8 09 : I discussed with gitte about the two classes I created, but he said that it is very necessary to realize which method I want to use before writing a single line of code. Attaching was never a option so I had just two options left either debugger launching the JVM or JVM launching debugger. In the second case, I would need to set the special options for the JVM using the Fiji launcher which might affect the performance of the JVM and hence the performance of Fiji while on the other hand the if debugger launches the JVM we can anytime take care of the options etc. So I finally came to the conclusion to use the "debugger launching JVM" method. But that will also involve a task of loading all the images prior to launching the plugin to be debugged. 

July 9 09 : Today's discussion leaves a number of questions in my mind which I need to look into . Firstly, how to create such a wrapper class which wraps all objects into one, may be hold reference of other objects. Secondly, the use of the inner static class in the main class. Thirdly, How to send serialized data between two JVMs. Fourthly, It is clear that we dont need to know the types of data while deserializing as we can use a wrapper class but later on after deserializing dont we need to find what and how many images have to be loaded.

July 10 09 : I discussed with gitte about the structure of the inner wrapper class but later he suggested not to carry on with the job of serializing and deserializing rather use the ClassPrepareRequest interface to know when the main class is loaded and then use the ClassType instance to get the methods in the main class and invoke them all from the calling JVM. In this way I can construct the image even in the launched JVM or the debuggee and all this will be done prior to launching of the plugin which will most probably be the argument to the main class while launching the new JVM. The images will have to be sent to the target JVM(debuggee) through the TransportService in the JDI.

July 14 09 : I followed the design discussed during weekend and created one basic debugging class which can launch the JVM and one main class to construct the images and then launch the plugin but the image transport was becoming a problem as the we can have only those objects as arguments which are references in the target JVM so that leaves me with only one options as to have primitive types as the arguments. I asked gitte for help so he suggested me to stop constructing images for the time being and first provide a single breakpoint debugging.

July 15 09 : I changed the design and tried to change the design with out the constructing of images and with single line breakpoint which worked fine when used as non-plugin but when used with in the Script-Editor has a NoClassDefFoundError for a class which was imported properly i.e. AbsentInformationException.

July 16 09 : I tried to run the debugger with MainClassForDebugging as the main class but I got NoClassDefFoundError for the VMStartException class in the JDI package and I set the tools.jar in the classpath. So I discussed with gitte and he suggested that it is problem related to Fiji class loader so he suggested me to run the ScriptEditor with "--cp ./java/win32/jdk1.6.0_03/lib/tools.jar".

July 17 09 : I tried running the script editor using the --cp option and then I did not get the NoClassDefFoundError for the VMStartException but now there was some problem loading the mainclass as it suggested with NoClassDefFoundError that there is no such class in the default class path. So gitte suggested me three different methods. First one was to add the full path to the Script_Editor to the system property "java.class.path" which seemingly was simplest. Second and a bit tougher one was to redefine main class by the target JVM by reading the byte code for the class directly. Third and the most elegant one was to create a stub jar file in the jars/ having the main class . This seemed to be a solution as the jar files in the jars/ are already in the default classpath. 

July 20 09 : After a birthday weekend, I tried first the simplest of the options described above that is just adding the full path to the java.class.path but that did not worked . So I printed the whole of the default class path and I realized that there was already the full path to the Script_Editor.jar in the default class path . I asked gitte about this through mail and he commented that this is because the JVM uses the java.class.path only when it is launched so it will not be the same later on as it had used. So I decided to go for the more elegant approach of creating a stub jar file but the NoClassDefFoundError kept haunting me. I tried everything packaging depackaging ,importing but there is something I am missing so I sent an overnight mail to gitte making his otherwise busy schedule more busy.

July 21 09 : I again kept doing experiments and finally I struck gold. I transferred the stub folder which was used in the Script_Editor_Stub.jar from fiji/src-plugins/Script_Editor folder to fiji/ and then built the jar file and the main class did run and I could generate breakpoints in the MainClassForDebugging. Now time for another but . So when I tried using ij package in the MainClassForDebugging for running the plugIn , I got new NoClassDefFoundError, this time for the ij.IJ class . My best guess was that it is not present in the CLASSPATH of the stub jar file so I took no time in doing that but it was not where the mistake was I guesss.
