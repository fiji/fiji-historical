gitte asked me to create a file which I will commit in a moment and now some change after that .I am revising the git commit,add and status commands

May6 09 : I have created a sample java frame with fiji icon(microscope one)  and using Rsyntaxtextarea jar file

May7 09	: added the opening and saving files feature and learnt about the "diff" command , advantage of "git log -p" over "git log" and the creating jar files simply by adding the CLASSPATH in the Fakefile

May9 09	:  improved the file opening and closing i.e. managing replacements and when to save and when to save as added simple features like cut copy paste undo and redo first by my own code but then realized that the RTextEditorKit.java(in package RTextArea of submodule RSyntaxTextArea) has straight forward functions for these functions I spent five hours on learning clipboard and Transferable etc but Rsyntaxtextarea is awesome got to go home otherwise I would have played a lot today with other functions in RTextEditorKit

May11 09: Gitte told me how to make an application a plugin and I went through the autocomplete package especially the CompletionProvider interface and also sorted out a problem regarding creating a jar file as I was stupid enough not to rebuild the Fiji jar file in the misc folder which I was supposed to do as gitte changed some settings for --jar a couple of days ago.

May13 09: Sorted out how to generate the class names for the autocompletion by splitting the classpath.
	For the completion part for every path create recursive list at every step with each List having a key which It will fill and the key will be the path till that point like for "j" it will match the first part ie the parent and then and on writing "java.a" it should match with the second step on the List java.awt  

May17 09 Created the class names generator but the structure is not perfect.Also learnt how to learn to remove white spaces and the Fiji Classnames convention etc.

May19 09 Created the FindDialog.java and the ReplaceDialog.java and added it to the texteditor GUI and removed flaws regarding the Quit and some minor functions on opening and closing

May21 09 Changed the design of the autocompleteClassGenerator.java and went through the details of the DefaultCompletionProvider,AbstractCompletionProvider.java and other classes in the autocomplete package.

May23 09 talked to gitte about the design of the autocompleteClassGenerator.java and hence changed the design to a heap(tree with any number of children) and and used TreeSet class as a list of the names which will childList of a given node the design worked fine individually but still giving a lot of errors when added it to the fiji.scripting package the file is now known as Classnames.java and 

May24 09 Created file named the DefaultProvider.java on the lines of the DefaultCompletionProvider.java and also a file named ClassCompletionProvider.java

May25 09 The autocomplete window is working fine but some problems are there like I explicitly created a new CompletionProvider everytime I pressed a new key as the all possible list of completions are variable and depend on the text in the text area so I did not allow the editor to divide the tokens with "." and hence like if I write "java.awt.ev" It treats the whole as a token but I manually splitted the token on the basis of "." to decide which completions should be there in the completion Provider but the autocomplete package has a inbuilt feature which automatically prints the completion if there is only one completion and not create the window but since I played with their token definition so It perhaps does not consider event as a completion of "java.awt.ev" and hence does not print neither does it show window as the no of completions is one .So in fact for the editor there is no completion for a single completion case and more over in some cases it is showing no completion i.e. java.util.NoSuchElementException I think it is some logical flaw .looking into it cant ssh after 12 midnight to outside servers .

May26 09 Created a new function getEnteredText which uses the definition for ValidChar as any letter or digit including '_' or '.' so that it does not interfere with the the getAlreadyEnteredText function which uses the definition for ValidChar as any letter or digit including '_' only.So I am now able to provide completion after ".".Created Script_Editor.config and changed the MAINCLASS to Script_Editor and did necessary changes to include the run function required to make the text editor a plugin.

May27 09 created a menu item for Autocomplete by trying to fake a keypress(which is done by class Java.awt.Robot but that was strongly not suggested by Mark so first tried to inherit the AutoCompletion class to another class ForAutocompleteMenu and then access the protected function refreshPopupWindow but I needed the attributes of the object of Autocompletion which I could not provide as the function was protected but then found about the doCompletion() method which was designed to make hosting applications invoke autocomplete programmatically. Did changes like not calling for the autocomplete when there is no text in the textArea earlier it was doing so and hence producing all list of completions. Moreover got to know more about the proper usage of super() function in the constructor of the sub-class

May28 09 I got mail from Johannes regarding the doCompletion function() but the important thing was the way he searched for it I took an hour or so for me to find the method doCompletion. Anyways I forgot to mention that yesterday I changed the style of Dialog boxes as there is a problem in JFileChooser in navigating through the directories.I used ij.io.OpenDialog and ij.io.SaveDialog.Anyways transferred the logic of splitting and creating thelist of Completions from ClassCompletionProvider to ClassNames.java. Removed the description window and now there will hopefully be no uncaught exception while autocompleting. I am also facing a problem that the Filedialog box opened on doing OpenDialog dialog= new OpenDialog(); is not disposing on its own. The FileDialog box is not a class member so I am not able to do setDefaultOperationOnClose(EXIT_ON_CLOSE) or force it to dispose. 

May29 09 : Discussed with gitte the final design for the class generation learnt a bit about the generics, TreeMap but finally decided to go for the design with a class Package extending TreeSet<Item> where Item is an Interface having a getName() function which returns the key.The Package has a package part name as its key and the there is a ClassName class which is basically a class having a String key and implementing the Item interface . The new class which generates the classnames will be temporarily known as ClassNames1 . So I decided to add four new files to the package three classes and one interface. Created the two classes Package,ClassName and the package Item .

May30 09 : Created the ClassNames1.java which dramatically simplified the size and the complexity of the code but I am not sure that it is as efficint as before while creating the tree but that has to do once so not a major issue. After a few errors managed to get it working but some errors are still left.

May31 09 : Removed the errors etc. Yes leafw and gitte were right when I ran the Editor as plugin and not as standalone the OpenDialog and SaveDialog worked fine .Phew, the classnames generation and autocompletion of classnames is finally over now looking for the method names got a mail from Albert suggesting some changes.Was out of Campus from Saturday night to Sunday afternoon so not much work today so far I intend to make changes which Albert has suggested.Looking forward to another exciting week.

June1 09 : Some of the time was used up in the setting of pin and other banking procedures of the GSoc card. But implemented the changes suggested by Albert in his mail .

June2 09 : Added the constructors as well in the completion's list.I used the custom ClassLoader using the getClass().getClassLoader() function to load the classes as suggested by gitte. Also I earlier forgot to include the include the classnames in the list of completions when there is no dot in the list of completions which I checked but there is  a concern it is getting a bit slow as now for each classname I have to go down the tree recursively but to keep it simple this is the sacrifice right now am I right gitte ? I faced a problem of NoClassDefFoundError which was arising when looking for classNames as there were some classes which use to be there(I mean classpath) during the compilation but they could not be found during running.Right now I am just catching it and ignoring them cant do much about it right now.

June3 09 : Did changes again in the ClassNames1.java to distinguish Package and ClassName and also improved the completion list when there is a dot in the end of the entered text and first changed the design of addToTree from recursion to for-loop then realized that objects are passed to reference so again changed back to recursion.

June4 09 : Had a chat with gitte first about the recursion thing and then I realized that the objects in the function are not actually the objects but they are the references so finally worked out the loop structure and it had one more obvious advantage that I did not have to split it every time or in fact I did not have to split even once. Also discussed about the functions completion and first decided to move on with the static methods as I will not have to worry about the declared objects for the static methods and variables.  
