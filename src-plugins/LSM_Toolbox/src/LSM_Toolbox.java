/*
 * LSM_Toolbox.java
 *
 * @author Patrick Pirrotte
 *
 * Created on february 2002 Copyright (C) 2002-2006 Patrick Pirrotte
 *
 * ImageJ plugin
 * Version	:      4.0b
 * Authors  :      Patrick PIRROTTE, Jerome MUTTERER
 * Licence  :	   GPL 
 * 
 * This software includes images from the Nuvola iconset which was released under LGPL v2.1, please see
 * iconset license
 *
 * Emails   :      patrick.pirrotte@gmx.net (project maintainer)
 *                 jerome.mutterer@ibmp-ulp.u-strasbg.fr
 *
 * Description :   This plugin reads *.lsm files produced by Zeiss LSM 510 confocal microscopes.
 *                 Each channel of an image plane, stack or time series is opened as a separate
 *                 image or stack window. The plugin also retrieves calibration infos from
 *                 LSM files. This plugin has been built using Zeiss' v4.0 fileformat
 *                 specifications. This software is compatible with files generated with AIM version 4.0.
 *                 Other versions of the lsm format should be readable more or less well.
 *                 A short manual is available from
 *                 ibmp.u-strasbg.fr/sg/microscopie/methods/lsmio/lsmio.htm
 *
 * To run from a plugin:
 * runPlugIn("LSM_Toolbox","file=path_to_file");
 * To run from a macro:
 * call("LSM_Toolbox.open","file=path_to_file")
 * 
 * __________________________________________________________________________
 * (C) 2003-2006 Patrick Pirrotte, Jérôme Mutterer
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

import ij.IJ;
import ij.ImagePlus;
import ij.Macro;
import ij.WindowManager;
import ij.gui.ImageWindow;
import ij.plugin.PlugIn;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import org.imagearchive.lsm.toolbox.MasterModel;
import org.imagearchive.lsm.toolbox.Reader;
import org.imagearchive.lsm.toolbox.gui.AboutDialog;
import org.imagearchive.lsm.toolbox.gui.ControlPanelFrame;
import org.imagearchive.lsm.toolbox.info.LsmFileInfo;

/*******************************************************************************
 * class : LSM_Reader, main class *
 ******************************************************************************/

public class LSM_Toolbox implements PlugIn {

	public MasterModel masterModel;

	public final String infoMessage = "LSM_Toolbox" + MasterModel.VERSION
			+ " Copyright (C) 2002-2006 P. Pirrotte, J. Mutterer\n\n"
			+ "This software is subject to the GNU General Public License\n"
			+ "Please read LICENSE or read source code information headers\n"
			+ "Works on images generated by LSM 510 version 2.8 to 4.0\n"
			+ "Contacts :\n" + "patrick.pirrotte@gmx.net and "
			+ "jerome.mutterer@ibmp-ulp.u-strasbg.fr\n";

	public ControlPanelFrame controlPanel;

	public void run(String args) {
		IJ.register(LSM_Toolbox.class);
		IJ.debugMode = MasterModel.debugMode;
		masterModel = getMasterModel();
		if (args.equals("about")) {
			new AboutDialog(new JFrame(), masterModel).setVisible(true);
			return;
		}
		
		String fileName = "";
		String macroOptions = Macro.getOptions();
		if (!args.equals(""))
			fileName = getPath(args);
		if (macroOptions != null && (!macroOptions.equals("")))
			fileName = getPath(macroOptions);
		if (!fileName.equals("")){
			final String fn = fileName;
			final Reader reader = new Reader(masterModel);
			SwingUtilities.invokeLater(new Runnable() {
				ImageWindow iwc = null;
				public void run() {
					try {
						IJ.showStatus("Loading image");
						ImagePlus[] imp = reader.open(fn,
								true);
						IJ.showStatus("Image loaded");
						if (imp == null)
							return;
						for (int i = 0; i < imp.length; i++) {
							imp[i].show();
							iwc = imp[i].getWindow();
							final LsmFileInfo lsm = (LsmFileInfo) iwc
									.getImagePlus().getOriginalFileInfo();
							iwc.addFocusListener(new FocusListener() {
								final LsmFileInfo lsmfi = lsm;

								public void focusGained(FocusEvent e) {
									masterModel.setLSMFI(lsmfi);
								}

								public void focusLost(FocusEvent e) {
								}
							});
							masterModel.setLSMFI(lsm);
							masterModel.fireLSMFileInfoChanged();
						}
					} catch (OutOfMemoryError e) {
						IJ.outOfMemory("Could not load lsm image.");
					}
				}

			});
		} else
			if (args.equals("")) {
				controlPanel = new ControlPanelFrame(masterModel);
				controlPanel.initializeGUI();
		}
	}
	
	public String getPath(String options){
		int index = options.indexOf("file=");
		return options.substring(index+5,options.length());
	}
	
	//Use this method to open from a macro
	public static void open(String args){
		new LSM_Toolbox().run(args);
	}
	
	private MasterModel getMasterModel(){
		int ids[] = WindowManager.getIDList();
		if (ids!=null){
			for (int i=0;i<ids.length;i++){
				ImagePlus imp = WindowManager.getImage(ids[0]);
				if (imp.getOriginalFileInfo() instanceof LsmFileInfo){
					System.err.println("found mm");
					return  ((LsmFileInfo)imp.getOriginalFileInfo()).getMasterModel();
				}
			}
		}
		return new MasterModel();
	}
}
