/*
 * LSM_Toolbox.java
 *
 * @author Patrick Pirrotte
 *
 * Created on february 2002 Copyright (C) 2002-2008 Patrick Pirrotte
 *
 * ImageJ plugin
 * Version	:      4.0e
 * Authors  :      Patrick PIRROTTE, Jerome MUTTERER
 * Licence  :	   GPL 
 * 
 * This software includes images from the Nuvola iconset which was released under LGPL v2.1, please see
 * iconset license
 *
 * Emails   :      patrick.pirrotte@gmx.net (project maintainer)
 *                 jerome.mutterer@ibmp-ulp.u-strasbg.fr
 *
 * Description :   This plugin reads *.lsm files produced by Zeiss LSM 510 confocal microscopes.
 *                 Each channel of an image plane, stack or time series is opened as a separate
 *                 image or stack window. The plugin also retrieves calibration infos from
 *                 LSM files. This plugin has been built using Zeiss' v4.0 fileformat
 *                 specifications. This software is compatible with files generated with AIM version 4.0.
 *                 Other versions of the lsm format should be readable more or less well.
 *                 A short manual is available from
 *                 ibmp.u-strasbg.fr/sg/microscopie/methods/lsmio/lsmio.htm
 *
 * To run from a plugin:
 * runPlugIn("LSM_Toolbox","file=path_to_file");
 * To run from a macro:
 * call("LSM_Toolbox.open","file=path_to_file")
 * 
 * __________________________________________________________________________
 * (C) 2003-2008 Patrick Pirrotte, Jérôme Mutterer
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

import ij.IJ;
import ij.ImagePlus;
import ij.Macro;
import ij.macro.Functions;
import ij.plugin.PlugIn;

import javax.swing.JFrame;

import org.imagearchive.lsm.toolbox.BatchConverter;
import org.imagearchive.lsm.toolbox.DomXmlExporter;
import org.imagearchive.lsm.toolbox.LSMMacroExtension;
import org.imagearchive.lsm.toolbox.MasterModel;
import org.imagearchive.lsm.toolbox.Reader;
import org.imagearchive.lsm.toolbox.gui.AboutDialog;
import org.imagearchive.lsm.toolbox.gui.ControlPanelFrame;

/*******************************************************************************
 * class : LSM_Reader, main class *
 ******************************************************************************/

public class LSM_Toolbox implements PlugIn {

	public MasterModel masterModel = new MasterModel();

	public final String infoMessage = "LSM_Toolbox" + MasterModel.VERSION
			+ " Copyright (C) 2002-2008 P. Pirrotte, J. Mutterer\n\n"
			+ "This software is subject to the GNU General Public License\n"
			+ "Please read LICENSE or read source code information headers\n"
			+ "Works on images generated by LSM 510 version 2.8 to 4.0\n"
			+ "Contacts :\n" + "patrick.pirrotte@gmx.net and "
			+ "jerome.mutterer@ibmp-ulp.u-strasbg.fr\n";

	public ControlPanelFrame controlPanel;

	public void run(String args) {
		IJ.register(LSM_Toolbox.class);
		MasterModel.debugMode = IJ.debugMode;

		if (args.equals("about")) {
			new AboutDialog(new JFrame(), masterModel).setVisible(true);
			return;
		}
		if (IJ.versionLessThan("1.41a"))
			return;
		 if (IJ.macroRunning()) {
			 Functions.registerExtensions(new LSMMacroExtension());
		      return;
	    }

		String fileName = "";
		String macroOptions = Macro.getOptions();
		if (!args.equals(""))
			fileName = getMacroOption("file=", args);
		if (macroOptions != null && (!macroOptions.equals("")))
			fileName = getMacroOption("file=", macroOptions).trim();

		if (!fileName.equals("") && fileName.endsWith(".lsm")) {

			final String fn = fileName;
			final Reader reader = new Reader(masterModel);
			try {
				IJ.showStatus("Loading image");
				ImagePlus imp = reader.open(fn, true);
				IJ.showStatus("Image loaded");
				if (imp == null)
					return;
				imp.setPosition(1, 1, 1);
				imp.show();
			} catch (OutOfMemoryError e) {
				IJ.outOfMemory("Could not load lsm image.");
			}

		} else if (fileName.endsWith(".csv")) {
			BatchConverter converter = new BatchConverter(masterModel);
			converter.convertBatchFile(args);

		} else if (args.equals("")) {
			controlPanel = new ControlPanelFrame(masterModel);
			controlPanel.initializeGUI();
		}
	}

	public String getMacroOption(String tag, String options) {
		int index = options.indexOf(tag);
		if (index == -1)
			return null;
		return options.substring(index + 5, options.length());
	}

	// Use this method to open from a macro
	public static void open(String args) {
		new LSM_Toolbox().run(args);
	}

	public static String getXML(String filename, boolean filter) {
		return new DomXmlExporter().getXML(filename, filter);
	}
}
