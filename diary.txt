27th May 09
Today i am going to write my diary for whole week since i have not updated my diary for a week.During this week,i played with JMathLib_Interpreter and became more familiar with the source code.Initially i faced problem regarding startup of JMathLib_Interpreter when i found that there was no package name.So i just addedthe package  name and then there was some problem with commands which was not working well with the current JMathlib interpreter.Gitte helped me by revealing the fact that since it was not a standalone interpreter,it required building a webFunctionsList.dat file.This file had to be created by starting JMathlib and calling createfunctionslist() command in the command line of jmathlib gui.Even when everything has been done and webFunctionsList.dat file is present, its not working properly but i will figure it out soon.

Another thing gitte  mentioned was that JMathlib did not support yet import statements and Javaaddpath() functions which are necessary to be implemented for implementing another .m files in Jmathlib.

I started with implementation of Refresh_JMathlib_Interpreter.java since gitte mentioned that it was  much simple and i had pefect examples already for refresh plugins in the fiji repository.Firstly i had to look at the source code of refresh scripts of other supporting languages.Initially i got a rough idea about the working of refresh scripts but gitte explained the correct implementation about how exactly the new plugins are executed with the help of refresh scripts.I have implemented the Refresh_JMathLib_Interpreter.java with the help of TextUI.java present in the JMathlib source code but actual testing is left still since jmathlib Interpreter is not working well for all the functions even for some basic functions like plot(y,x) its not working fine.Since last day,i am stuck at this step and i am more looking into the source code to find out some minor details whiich i might be missing.

28 May 09
Today also i tried to mess up with webFunctionList.dat file and found some more problems.My generated webFunctionsList.dat file has a starting "n/" prefix added in the beginning of each path of class file and .m file present the list file.Initially i had no idea about it but after seeing the createfunctionlist.java file, i saw that this path has to be matched in order for proper functioning of jmathlib interpreter and so there might be some issues with this path.Then i had a closer look at all the files related with webfunctionloader and tried to understand the whole logic behind it.I played with the source code using some println statements.Then i finally had a talk with gitte regarding this in the evening and he added some more focus regarding this problem ,how to solve it and look at the resourcestream() used in the webFunctionLoader class and also i can use resourcepath() method to print the URL of the path.In the night, i tried some hit and trial steps by including the correct webFunctionList.dat in the mathlib jar file and then test the jmathlib interpreter but all these efforts were useless and only consuming my precious time.

29th may 09
Today i had to leave my company somewhat late because of the discussion of project in the company with the project leaders.In the evening i got the
mail of gitte how he resolved the issue of webfunctionslist.dat file and why jmathlib was not able to recognize it.Actually, the very basic fault was
in the jmathlib_interpreter itself where the in the constructor of inerpreter class, "true" value was passed which was making jmathlib a standalone
application and in fact it wasn't standalone and this very basic step messed up the whole thing.I don't know why i can't figure out this thing myself
and much disappointed as it had to be done by myself.Moreover there was some fault in the getrsourcestrem(../../) also where it was not able to reslove
the path if the file was present in the jar.These all facts were revealed by gitte and i just tried to follow all these steps to get jmathlib
running.Finally i succeeded in running the jmathlib interpreter and then i testes various functions of jmathlib toolbox.Still some of them were not
working showing some more exceptions.Even given a path to a .m file, it was not able to run the scripts in the file.Then i had to fix this also and in
the night, i continued with this testing of jmathlib functions.

30th May
Today was a good day for me as all the issues related with jmathlib interpreter were resolved and jmathlib interpreter worked to a good extent.Even Refresh_JMathLib_Scripts.java was also working but i had to change it as the earlier one was written just for checking the working of refresh scripts.Most of the issue was related to getResourceStream() function which was not able to detect the (../..) path in the jar file.However,it needs to be fixed in jmathlib and even the webfunctionloader needs to be fixed.The most important changes were first to include the webFunctionsList.dat file in jar file.For this i had to change the JMathlib.Fakefile so as to include this list also in the jar.Further i changed the production of this file from bin directory to src directory in the Jmathlib folder as putting inside the bin folder was including the bin directory also in the jar.I couldn,t find the reason for this.So i changed the directory itself to bin.Then in my computer there was /n prefix added to each path in the webfunctionslist.dat file.For this also i had to change the createFunctionsList.java so as not to add /n prefix.

31 May 09
Today i started with checking the working of refresh_scripts.java and it was working fine.However it was a poor code according to gitte and had various errors according to code conventions of fiji.So i had to look at this file again.Further i also tried to implement an external function in java realted to calculating the mesh of a matrix.There were some errors and i had to look closely at the source code of all the token classes already implemented in the Jmathlib.There are so many token classes and handling them appeared a bit tedious task to me.I also searched on the net to fix some of the limitations of JMathlib such as how to read from a jar file directly and other stiffs related to functionloader when jmathlib is not running in standalone mode.

04 June 09
Today again i am writing my diary after some days of gap and i felt too much self contempt today.But i hope it will help me in continuing my work well.
I went through the source code again trying to find out the exact place where the working of two cases standalone and non standalone mode goes
different and why in non-standalone mode we are not able to execute any .m file placed in the same directory as a function within another .m file.
It all starts from the executeExpression() method where we pass the parameter as a function name or the script written inside the file read by 
Refresh_JMahtLib_Scripts.java.Now in case of the name of a .m file written inside the .m file as a function,the constructor of Interpreter by calling
new Interpreter(false) from Refresh_JMathaLib_Scripts.java sets all the global parameters by calling the constructor of GlobalValues.java in which
further the constructor of FunctionManager.java is called which makes the functionloader list according to whether it is standalone or non standalone.
So in our case, the list is made from webFucntionLoader which creates the list according to the harcoded path in webFunctionsList.dat file.
So till now an expression tree is constructed and the method called in executeExpression() is the evaluate() method which brings us to the
FunctionToken.java in which there is special handling for return and variable tokens.Then the findFunction() is called which brings us to back to
FunctionManager.java.Again here there is different mode of operation for standalone and embedded mode.In our case of embedded mode,webFunctionLoader
 findfunction() comes into picture and it operates by searching for the function in its own functionlist which is created by the hardcoded path already.
In our case, the filename inside the file is present in the same directory and its not listed in the webFunctionList.dat file.So it can't operate on
that file resolved as function name again by reading from the file and doing all the operations for executing the script in the file.So here comes the
 difference when the list is different for the two cases standalone and non-standalone and the processing goes also different in the two cases.I hope
gitte can understand that i have done my analysis and understand the problem.
The solutions can be as:
1. Either adding support for adding the .m file present in the same directory anyhow in the weBFunctionsList.dat file.This will need telling JMathLib 
where the .m file lies as it is not in the src of jmathlib.
2.One recursive approach having duplication of code  done again in Refresh_JMathLib_Scripts.java by again reading from the file and doing the same stuff
already done.

I had decided to go for whole source code of Jmathlib but its wise not to go through whole in one night otherwise i will have the same condition as 
earlier that i have read the code and then also i am not able to map the correct flow of execution.

 
