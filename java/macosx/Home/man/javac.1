'\" t
.\" @(#)javac.1 1.11 01/05/29 SMI;
.\" Copyright 2000 Sun Microsystems, Inc. All rights reserved.
.\" Copyright 2000 Sun Microsystems, Inc. Tous droits réservés.
.\" 
.TH javac 1 "14 July 2000"
.SH NAME
javac \- Java compiler
.SH SYNOPSIS
.B javac 
[ 
.BI \-bootclasspath " bootclasspath"
]
.if n .ti +5n
[
.BI \-classpath " classpath"
]
[
.BI \-d " directory"
]
.ti +5n
[
.B \-deprecation
] [
.B \-encoding
] [
.BI \-extdirs " directories"
]
.ti +5n
[
.B \-g
| 
.B \-g:none
|
.BI \-g: keyword-list
] [
.BI \-J option
]
.if n .ti +5n
[
.B \-nowarn
] [
.B \-O
]
.if t .ti +5n
[
.BI \-source " release"
.if n .ti +5n
[
.BI \-sourcepath " sourcepath"
]
.if n .ti +5n
[
.BI \-target " version"
] [
.B \-verbose
] [
.B \-X
]
.ti +5n
[
.B \-Xstdout
] [
.B \-Xswitchcheck
]
.if n .ti +5n
[ 
.I sourcefiles 
] [ 
.I @files 
]
.SH PARAMETERS
Options may be in any order.
For a discussion of
parameters which apply to a specific option, see
.B OPTIONS
below.
.TP 15
.I sourcefiles
One or more source files to be compiled (such as
\f3MyClass.java\f1).
.TP 15
\f3@\f1\f2files\f1
One or more files that list source files.
.SH DESCRIPTION
.IX "Java compiler" "" "Java compiler \(em \fLjavac\fP"
.IX "javac" "" "\fLjavac\fP \(em Java compiler"
The
.B javac 
tool reads class and interface definitions, written in
the Java programming language, and compiles them into bytecode
class files.
.LP
There are two ways to pass source code file names to 
.BR javac :
.TP 2
\(bu
For a small number of source files, simply list the file
names on the command line.
.TP 2
\(bu
For a large number of source files, list the the file names
in a file, separated by blanks or line breaks. Then use the
list file name on the 
.B javac 
command line, preceded by an @
character.
.LP
Source code file names must have 
.B .java 
suffixes, class file names
must have
.B .class
suffixes, and both source and class files must
have root names that identify the class.
For example, a class
called
.B MyClass
would be written in a source file called
.B MyClass.java 
and compiled into a bytecode class file called
.BR MyClass.class .
.LP
Inner class definitions produce additional class files.
These class files have names combining the inner and outer class names,
such as 
.BR MyClass$MyInnerClass.class .
.LP
You should arrange source files in a directory tree that reflects
their package tree.
For example, if you keep all your source files in 
.BR /workspace , 
the source code for 
.B com.mysoft.mypack.MyClass
should be in 
.BR /workspace/com/mysoft/mypack/MyClass.java .
.LP
By default, the compiler puts each class file in the same
directory as its source file.
You can specify a separate
destination directory with
.B \-d 
(see 
.BR  OPTIONS , 
below).
.SS SEARCHING FOR TYPES
.IX "javac" "Searching for Types" "\fLjavac\fP \(em Java compiler"
When compiling a source file, the compiler often needs information
about a type it does not yet recognize.
The compiler needs type
information for every class or interface used, extended, or
implemented in the source file.
This includes classes and
interfaces not explicitly mentioned in the source file but which
provide information through inheritance.
.LP
For example, when you subclass 
.BR java.applet.Applet , 
you are also
using Applet's ancestor classes: 
.BR java.awt.Panel ,
.BR java.awt.Container , 
.BR java.awt.Component , 
and 
.BR java.awt.Object .
.LP
When the compiler needs type information, it looks for a source
file or class file which defines the type.
The compiler searches
first in the bootstrap and extension classes, then in the user
class path.
The user class path is defined by setting the
.SB CLASSPATH 
environment variable or by using the
.B \-classpath 
command line option.
(For details, see 
.BR "Setting the Class Path" .)
If you use the 
.B \-sourcepath 
option, the compiler
searches the indicated path for source files. Otherwise the
compiler searches the user class path both for class files and
source files.
You can specify different bootstrap or extension
classes with the 
.B \-bootclasspath 
and 
.B \-extdirs 
options. See
.B Cross-Compilation Options
below.
.LP
A successful type search may produce a class file, a source file,
or both.
Here is how 
.B javac 
handles each situation:
.TP 2
\(bu
Search produces a class file but no source file: 
.B javac 
uses the class file.
.TP 2
\(bu
Search produces a source file but no class file: 
.B javac
compiles the source file and uses the resulting class file.
.TP 2
\(bu
Search produces both a source file and a class file:
.B javac
determines whether the class file is out of date.
If the class file is out of date, 
.B javac 
recompiles the source file
and uses the updated class file.
Otherwise, 
.B javac 
just uses the class file.
.RS 2
.LP
By default, 
.B javac 
considers a class file out of date only if
it is older than the source file.
(The 
.B \-Xdepend 
option specifies a slower but more reliable procedure.)
.RE
.LP
Notice that 
.B javac 
can silently compile source files not mentioned on
the command line.
Use the 
.B \-verbose 
option to trace automatic compilation.
.SH OPTIONS
The compiler has a set of standard options that are supported on
the current development environment and will be supported in
future releases.
An additional set of non-standard options are
specific to the current virtual machine implementation and are
subject to change in the future.
Non-standard options begin with
.BR \-X .
.SS STANDARD OPTIONS
.IX "javac" "Standard Options" "\fLjavac\fP \(em Java compiler"
.TP
.BI \-classpath " classpath"
Sets the user class path, overriding the user class path in
the 
.SB CLASSPATH 
environment variable.
If neither 
.SB CLASSPATH 
nor
.B \-classpath 
is specified, the user class path consists of the
current directory.
See
.B Setting the Class Path
for more details.
.RS
.LP
If the 
.B \-sourcepath 
option is not specified, the user class
path is searched for source files as well as class files.
.RE
.TP
.BI \-d " directory"
Sets the destination directory for class files. 
The destination directory must already exist; \fBjavac\fP will not 
create the destination directory. 
If a class is part of a package, 
.B javac 
puts the class file in a
subdirectory reflecting the package name, creating
directories as needed.
For example, if you specify 
.B \-d /home/myclasses 
and the class is called
.BR com.mypackage.MyClass , 
then the class file is called
.BR /home/myclasses/com/mypackage/MyClass.class .
.RS
.LP
If 
.B \-d 
is not specified, 
.B javac 
puts the class file in the same
directory as the source file.
.LP
Note that the directory specified by 
.B \-d 
is not automatically
added to your user class path.
.RE
.TP
.B \-deprecation
Shows a description of each use or override of a deprecated
member or class.
Without 
.BR \-deprecation , 
.B javac 
shows the names
of source files that use or override deprecated members or
classes.
.TP
.B \-encoding
Sets the source file encoding name, such as EUCJIS/SJIS.
If
.B \-encoding 
is not specified, the platform default converter is
used.
.TP
.B \-g
Generates all debugging information, including local variables.
By default, only line number and source file
information is generated.
.TP
.B \-g:none
Does not generate any debugging information.
.TP
.BI \-g: keyword-list
Generates only some kinds of debugging information, specified
by a comma separated list of keywords. Valid keywords are:
.RS
.TP 10
.B source
Source file debugging information
.TP
.B lines
Line number debugging information
.TP
.B vars
Local variable debugging information
.RE
.TP 7
.B \-nowarn
Disables warning messages.
.TP
.BI \-source " release"
Enables support for compiling source code containing assertions. 
.sp 1n
When \fIrelease\fP is set to 1.4, the compiler accepts code containing 
assertions. Assertions were introduced in J2SE 1.4.
.sp 1n
When \fIrelease\fP is set to 1.3, the compiler does not support 
assertions. The compiler defaults to the behavior in 1.3 if the 
\fB\-source\fP flag is not used.
.TP
.BI \-sourcepath " sourcepath"
Specifies the source code path to search for class or interface
definitions.
As with the user class path, source path entries
are separated by colons
.RB ( : )
and can be directories,
.SM JAR
archives, or
.SM ZIP
archives.
If packages are used, the local
path name within the directory or archive must reflect the
package name.
.RS
.LP
Note that classes found through the classpath are subject to
automatic recompilation if their sources are found.
.RE
.TP
.B \-verbose
Verbose output.
This includes information about each class
loaded and each source file compiled.
.SS CROSS-COMPILATION OPTIONS
.IX "javac" "Cross-Compilation Options" "\fLjavac\fP \(em Java compiler"
By default, classes are compiled against the bootstrap and
extension classes of the JDK that 
.B javac 
shipped with. But 
.B javac
also supports cross-compiling, where classes are compiled against
a bootstrap and extension classes of a different Java platform
implementation.
It is important to use
.B \-bootclasspath 
and 
.B \-extdirs
when cross-compiling; see
.B Cross-Compilation Example
below.
.TP
.BI \-bootclasspath " bootclasspath"
Cross-compiles against the specified set of boot classes.
As with the user class path, boot class path entries are
separated by colons
.RB ( : )
and can be directories,
.SM JAR
archives, or
.SM ZIP
archives.
.TP
.BI \-extdirs " directories"
Cross-compiles against the specified extension directories.
Directories are a colon-separated list of directories.
Each
.SM JAR
archive in the specified directories is searched for class files.
.TP
.BI \-target " version"
Generates class files that will work on
.SM VM\s0s
with the specified version.
The default is to generate class files to be
compatible with the 1.2 
.SM VM\s0, 
with one exception. When the \fB\-source 1.4\fP option is used, the default 
target is 1.4. 
The versions supported are:
.RS
.TP
1.1
Ensures that generated class files will be compatible
with 1.1 and 1.2
.SM VM\s0s.
.TP
1.2
Generates class files that will run on 1.2
.SM VM\s0s,
but will not run on 1.1
.SM VM\s0s.
This is the default.
.TP
1.3
Generates class files that run on 1.3 and later
.SM VM\s0s,
but will not run on 1.1 or 1.2 
.SM VM\s0s.
.TP
1.4
Generate class files that are compatible only with 1.4
.SM VM\s0s.
.RE
.SS NON-STANDARD OPTIONS
.IX "javac" "Non-Standard Options" "\fLjavac\fP \(em Java compiler"
.TP
.BI \-J option
Passes option to the java launcher called by
.BR javac . 
For
example, 
.B \-J\-Xms48m 
sets the startup memory to 48 megabytes.
Although it does not begin with 
.BR \-X , 
it is not a `standard option' of 
.BR javac . 
It is a common convention for 
.B \-J 
to pass options to the underlying
.SM VM
executing applications written in Java.
.RS
.LP
Notice that 
\s-1\f3CLASSPATH\s0\f1, 
.BR \-classpath , 
.BR \-bootclasspath , 
and 
.B \-extdirs
do not specify the classes used to run 
.BR javac . 
Tinkering with
the implementation of the compiler in this way is usually
pointless and always risky. If you do need to do this, use the 
.B \-J 
option to pass through options to the underlying java launcher.
.RE
.TP
.B \-X
Displays information about non-standard options and exit.
.TP
.B \-Xstdout
Sends compiler messages to
.BR System.out .
By default, compiler
messages go to
.BR System.err .
.TP
\fB\-Xswitchcheck\fR
Checks switch blocks for fall\-through cases and provides a warning 
message for any that are found. Fall\-through cases are cases in a 
switch block, other than the last case in the block, whose code does 
not include a break statement, allowing code execution to \(lqfall 
through\(rq from that case to the next case. For example, the code 
following the case 1 label in this switch block does not contain a 
break statement:
.RS
.LP
.nf
switch (x) {
case 1:
     System.out.println("1");
     //  No  break;  statement here.
case 2:
     System.out.println("2");
}
.fi
.LP
If the \fB\-Xswitchcheck\fR flag were used when compiling this code, 
the compiler would emit a warning about \(lqpossible fall\-through 
into case,\(rq along with the line number of the case in question.
.RE
.SS COMMAND LINE ARGUMENT FILES
.IX "javac" "File List" "\fLjavac\fP \(em Java compiler"
To shorten or simplify the 
.B javac 
command line, you can specify one or
more files that themselves contain one filename per line. 
This enablesyou to create \fBjavac\fP commands of any length 
on any operating system.
.sp 1n
An argument file can include \fBjavac\fP options and source filenames in any 
combination. The arguments within a file can be space-separated or 
newline-separated. Filenames within an argument file are relative to the 
current directory, not the location of the argument file. Wildcards (*) 
are not allowed in these lists (such as for specifying *.java). Use of 
the '@' character to recursively interpret files is not supported. 
.sp 1n
When  executing  \fBjavac\fP, pass in the path and name of each argument file 
with the '@' leading  character. When \fBjavac\fP encounters an argument 
beginning  with the character `@', it expands the contents of that file 
into the argument list.
.sp 1n
For example, you can list all of the source file names in a file 
named sourcefiles.
This file might look like:
.LP
.ft 3
.nf
    MyClass1.java
    MyClass2.java
    MyClass3.java
.fi
.ft 1
.LP
You could then run the compiler with:
.LP
.nf
   example% \fBjavac @sourcefiles\fP
.fi
.SH EXAMPLES
.SS Compiling a Simple Program
.IX "javac" "Compiling a Simple Program" "\fLjavac\fP \(em Java compiler"
One source file, 
.BR Hello.java , 
defines a class called
.BR greetings.Hello . 
The greetings directory is the package directory
both for the source file and the class file and is off the current
directory.
This allows us to use the default user class path. It
also makes it unnecessary to specify a separate destination
directory with 
.BR \-d .
.LP
.nf
   example% \fBls\fP
      greetings/
   example% \fBls greetings\fP
      Hello.java
   example% \fBcat greetings/Hello.java\fP
      package greetings;
   
      public class Hello {
          public static void main(String[] args) {
              for (int i=0; i < args.length; i++) {
                  System.out.println("Hello " + args[i]);
              }
          }
      }
   example% \fBjavac greetings/Hello.java\fP
   example% \fBls greetings\fP
      Hello.class   Hello.java
   example% \fBjava greetings.Hello World Universe Everyone\fP
      Hello World
      Hello Universe
      Hello Everyone
.fi
.SS Compiling Multiple Source Files
.IX "javac" "Compiling Multiple Source Files" "\fLjavac\fP \(em Java compiler"
This example compiles all the source files in the package
\fBgreetings\fP:
.LP
.nf
   example% \fBls\fP
      greetings/
   example% \fBls greetings\fP
      Aloha.java     GutenTag.java     Hello.java      Hi.java
   example% \fBjavac greetings/*.java\fP
   example% \fBls greetings\fP
      Aloha.class    GutenTag.class    Hello.class     Hi.class
      Aloha.java     GutenTag.java     Hello.java      Hi.java
.fi
.SS Specifying a User Class Path
.IX "javac" "Specifying a User Class Path" "\fLjavac\fP \(em Java compiler"
Having changed one of the source files in the previous example, we
recompile it:
.LP
.nf
   example% \fBpwd\fP
      /examples
   example% \fBjavac greetings/Hi.java\fP
.fi
.LP
Since
.B greetings.Hi
refers to other classes in the greetings
package, the compiler needs to find these other classes.
The example above works, because the default user class path happens
to be the directory containing the package directory.
But suppose
you want to recompile this file and not worry about which directory
you are in?
Then you need to add 
.B /examples 
to the user class path.
This can be done by setting \s-1\f3CLASSPATH\s0\f1, but in this example the
.B \-classpath 
option is used:
.LP
.nf
   example% \fBjavac \-classpath /examples /examples/greetings/Hi.java\fP
.fi
.LP
If you change
.B greetings.Hi
again to use a banner utility, that
utility also needs to be accessible through the user class path.
.LP
.nf
   example% \fBjavac \-classpath /examples:/lib/Banners.jar \\
                     /examples/greetings/Hi.java\fP
.fi
.LP
To execute a class in greetings, you need access both to greetings
and to the classes it uses.
.LP
.ft 3
.nf
   example% \fBjava \-classpath /examples:/lib/Banners.jar greetings.Hi\fP
.fi
.ft 1
.SS Separating Source Files and Class Files
.IX "javac" "Separating Source Files and Class Files" "\fLjavac\fP \(em Java compiler"
It often makes sense to keep source files and class files in
separate directories, especially on large projects.
Use the 
.B \-d 
option to indicate the separate class file destination.
Since the source files are not in the user class path, use 
.B \-sourcepath 
to help the compiler find them.
.LP
.nf
   example% \fBls\fP
      classes/  lib/      src/
   example% \fBls src\fP
      farewells/
   example% \fBls src/farewells\fP
      Base.java      GoodBye.java
   example% \fBls lib\fP
      Banners.jar
   example% \fBls classes\fP
   example% \fBjavac \-sourcepath src \-classpath classes:lib/Banners.jar \\
      src/farewells/GoodBye.java \-d classes\fP
   example% \fBls classes\fP
      farewells/
   example% \fBls classes/farewells\fP
      Base.class      GoodBye.class
.fi
.LP
Note that the compiler compiled src/farewells/Base.java, even
though it was not specified on the command line.
To trace automatic compiles, use the 
.B \-verbose 
option.
.SS Cross-Compilation Example
.IX "javac" "Cross-Compilation Example" "\fLjavac\fP \(em Java compiler"
Here the JDK 1.2 
.B javac 
is used to compile code that will run on a 1.1
.SM VM\s0.
.LP
.nf
   example% \fBjavac \-target 1.1 \-bootclasspath jdk1.1.7/lib/classes.zip \\
        \-extdirs "" OldCode.java\fP
.fi
.LP
The 
.B \-target 1.1 
option ensures that the generated class files will
be compatible with 1.1
.SM VM\s0s.
In JDK 1.2,
.B javac 
compiles for 1.1 by
default, so this option is not strictly required.
However, it is
good form because other compilers may have other defaults.
.LP
The JDK 1.2 
.B javac 
would also by default compile against its own
1.2 bootstrap classes, so it is necessary to tell 
.B javac 
to compile against
JDK 1.1 bootstrap classes instead.
This is done with 
.B \-bootclasspath
and 
.BR \-extdirs . 
Failing to do this might allow compilation against a
1.2
.SM API
that would not be present on a 1.1
.SM VM
and fail at runtime.
.br
.ne 11
.TE
.SH SEE ALSO
.BR jar (1),
.BR java (1),
.BR javadoc (1),
.BR javah (1),
.BR javap (1),
.BR jdb (1)
.LP
See or search the Java web site for the following:
.TP 10
.B The Java Extensions Mechanism @
http://java.sun.com/j2se/1.4/docs/guide/extensions/index.html
.LP
.TP 10
.B Setting the Class Path @
.nf
.if n http://java.sun.com/j2se/1.4/docs/tooldocs/solaris/classpath.html
.if t http://java.sun.com/j2se/1.4/docs/tooldocs/solaris/\\
.if t		classpath.html
.fi
